trigger:
- main

pool:
  vmImage: ubuntu-latest
variables:
  resourceGroupName: "azure-lcm"
  location: "westeurope"
  workloadName: "azlcm"
  workloadEnv: "ut"
  serviceConnectionName: "MCAPS-Hybrid-REQ-38041-2022-MoimHossain"
  azureDevOpsOrgName: "moim"

stages:
  - stage: CreateInfrastructure
    displayName: 'Create Infrastructure'    
    jobs:
    - job: CreateInfra
      displayName: 'Create infrastructure'
      steps:
      - checkout: self
      - task: UseDotNet@2
        displayName: 'Install .NET SDK'
        inputs:
          packageType: 'sdk'
          version: '8.0.x'

      - script: |
          cd  /home/vsts/work/1/s/CBSP-Azure/CustomerSolutions/Foundation/LCMDashboard/Management/LcmDashboard/Azure.Lcm.Web/
          dotnet publish "Azure.Lcm.Web.csproj" -c "Release" -o "$(Build.ArtifactStagingDirectory)/published-content-$(Build.BuildId)"
        displayName: 'Build application'

      - task: ArchiveFiles@2
        displayName: 'Zip application'
        inputs:
          rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/published-content-$(Build.BuildId)"
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          replaceExistingArchive: true 
 
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          artifact: 'drop'
          publishLocation: 'pipeline'

      - task: AzureWebApp@1
        inputs:
          azureSubscription: $(serviceConnectionName)
          appType: 'webApp'
          appName: 'azlcmapput'
          package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          configurationStrings: '-KEY_X "ValueKeyX" -KEY_Y "ValueKeyY"'
          deploymentMethod: 'zipDeploy'


      
      # - task: AzureCLI@2
      #   displayName: 'Deploy infrastructure'
      #   inputs:
      #     azureSubscription: $(serviceConnectionName)
      #     scriptType: bash
      #     scriptPath: 'CBSP-Azure/CustomerSolutions/Foundation/LCMDashboard/Management/LcmDashboard/infra/build-infra.sh'
      #     workingDirectory: CBSP-Azure/CustomerSolutions/Foundation/LCMDashboard/Management/LcmDashboard/infra
      #   env:
      #     resourceGroupName: $(resourceGroupName)
      #     location: $(location)
      #     workloadName: $(workloadName)
      #     workloadEnv: $(workloadEnv)

  # - stage: BuildContainerImage
  #   displayName: 'Build Container image'
  #   dependsOn: CreateInfrastructure
  #   condition: succeeded()
  #   jobs:
  #   - job: BuildContainer
  #     displayName: 'Build Container image'
  #     steps:
  #     - checkout: self
  #     - task: AzureCLI@2
  #       displayName: 'Build-Container-Image'
  #       inputs:
  #         azureSubscription: $(serviceConnectionName)
  #         scriptType: bash
  #         scriptPath: 'infra/build-container.sh'
  #       env:
  #         resourceGroupName: $(resourceGroupName)
  #         location: $(location)
  #         workloadName: $(workloadName)
  #         workloadEnv: $(workloadEnv)
  #         registryURI: $(registryURI)
  #         imageName: $(imageName)
  #         imageTag: $(Build.BuildId)

  # - stage: DeleteOldContainers
  #   displayName: 'Delete old containers'
  #   dependsOn: BuildContainerImage
  #   condition: succeeded()
  #   jobs:
  #   - job: DeleteOldContainers
  #     displayName: 'Delete old containers'
  #     steps:
  #     - checkout: self
  #     - task: AzureCLI@2
  #       displayName: 'Delete-Old-Job'
  #       inputs:
  #         azureSubscription: $(serviceConnectionName)
  #         scriptType: bash
  #         scriptPath: 'infra/delete-old-containers.sh'
  #       env:
  #         resourceGroupName: $(resourceGroupName)

  # - stage: ExecuteJob
  #   displayName: 'Execute container'
  #   dependsOn: BuildContainerImage
  #   condition: succeeded()
  #   jobs:
  #   - job: ExecuteJob
  #     displayName: 'Execute container'
  #     steps:
  #     - checkout: self
  #     - task: AzureCLI@2
  #       displayName: 'Run-Job'
  #       inputs:
  #         azureSubscription: $(serviceConnectionName)
  #         scriptType: bash
  #         scriptPath: 'infra/execute-job.sh'
  #       env:
  #         resourceGroupName: $(resourceGroupName)
  #         location: $(location)
  #         workloadName: $(workloadName)
  #         workloadEnv: $(workloadEnv)
  #         keyvaultUri: $(keyvaultUri)
  #         registryURI: $(registryURI)
  #         containerName : $(containerName)
  #         imageName: $(imageName)
  #         imageTag: $(Build.BuildId)
  #         GTIHUB_PAT: $(GTIHUB_PAT)
  #         STORAGE_ACCOUNT: $(workloadName)storageacc$(workloadEnv)  
  #         AZURE_DEVOPS_ORGNAME: $(azureDevOpsOrgName)
  #         AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_PAT)
